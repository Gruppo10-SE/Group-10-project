/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gruppo10se;
import java.util.*;

/**
 *
 * @author giaco
 */




public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Calculator() {
        initComponents();
        String[] operazioni = {"Select an operation", "+", "-", "*", "/", "sqrt", "+-"};
        
        outputTextField.setEditable(false);
        
        
        basicOperationComboBox.setEditable(false);
        for(String operazione : operazioni)
            basicOperationComboBox.addItem(operazione);
        
        inputTextField.requestFocusInWindow();
        inputTextField.setText("");
        
        inputButton.setText("Insert!");
        
        
    }
        
    StackDataStructure stack = new StackDataStructure();
    
    //"+", "-", "*", "/", "sqrt", "+-"
    
    private int doSum(){
        if(stack.size() >= 2){
            CartesianComplex a, b;
            a = stack.pop();
            b = stack.pop();
            stack.push(a.sum(b));
            return 0;
        }
        else return 1;
    }
    private int doSubtraction(){
        if(stack.size() >= 2){
            CartesianComplex a, b;
            a = stack.pop();
            b = stack.pop();
            stack.push(b.subtract(a));
            return 0;
        }
        else return 1;
    }
    private int doMultiplication(){
        if(stack.size() >= 2){
            CartesianComplex a, b;
            a = stack.pop();
            b = stack.pop();
            stack.push(a.multiply(b));
            return 0;
        }
        else return 1;
    }
    private int doDivision(){
        if(stack.size() >= 2){
            CartesianComplex a, b;
            a = stack.pop();
            b = stack.pop();
            stack.push(b.divides(a));
            return 0;
        }
        else return 1;
    }
    private void doSqrt(){
        //***DA DEFINIRE IN CARTESIAN COMPLEX***
    }
    private int doInvertSign(){
        //***DA DEFINIRE IN CARTESIAN COMPLEX***
        if (stack.size() >= 1) {
            CartesianComplex a;
            a = stack.pop();
            stack.push(a.invertSign());
            return 0;
        }
        else return 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        inputTextField = new javax.swing.JTextField();
        outputTextField = new javax.swing.JTextField();
        basicOperationComboBox = new javax.swing.JComboBox<>();
        inputButton = new javax.swing.JButton();
        complexOperationLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        tabTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        stackTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });

        outputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputTextFieldActionPerformed(evt);
            }
        });

        basicOperationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicOperationComboBoxActionPerformed(evt);
            }
        });

        inputButton.setText("Insert!");
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        complexOperationLabel.setText("Complex Operation");

        infoLabel.setText("Info");

        inputLabel.setText("Input");

        stackTextArea.setColumns(20);
        stackTextArea.setRows(5);
        jScrollPane2.setViewportView(stackTextArea);

        tabTabbedPane.addTab("Memory", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel)
                    .addComponent(infoLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tabTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(outputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(inputTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputButton)
                    .addComponent(basicOperationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(complexOperationLabel))
                .addGap(0, 44, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {basicOperationComboBox, inputButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputButton)
                    .addComponent(inputLabel, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(complexOperationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(basicOperationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void outputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputTextFieldActionPerformed
        
    }//GEN-LAST:event_outputTextFieldActionPerformed

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTextFieldActionPerformed

    private void basicOperationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicOperationComboBoxActionPerformed
        // TODO add your handling code here:
        
        //inputTextField.setText((String)basicOperationComboBox.getSelectedItem());
        //inputButton.setText("Calculate!");
        if(((String)basicOperationComboBox.getSelectedItem()).compareTo("+") == 0 && stack.size() >= 2){
            if (doSum() == 0){
            //outputTextField.setText("Sommato i numeri " + a + " " + b);
                stackTextArea.setText(stack.toString());
                inputTextField.setText("");
                inputTextField.requestFocusInWindow();
                inputButton.setText("Insert!");
            }
            else outputTextField.setText("Insufficient number of operands!");
        }
        else if(((String)basicOperationComboBox.getSelectedItem()).compareTo("-") == 0 && stack.size() >= 2){
            if (doSubtraction() == 0){
            //outputTextField.setText("Sommato i numeri " + a + " " + b);
                stackTextArea.setText(stack.toString());
                inputTextField.setText("");
                inputTextField.requestFocusInWindow();
                inputButton.setText("Insert!");
            }
            else outputTextField.setText("Insufficient number of operands!");            
        }
        else if(((String)basicOperationComboBox.getSelectedItem()).compareTo("*") == 0 && stack.size() >= 2){
            if (doMultiplication() == 0){
            //outputTextField.setText("Sommato i numeri " + a + " " + b);
                stackTextArea.setText(stack.toString());
                inputTextField.setText("");
                inputTextField.requestFocusInWindow();
                inputButton.setText("Insert!");
            }
            else outputTextField.setText("Insufficient number of operands!");
        }
        else if(((String)basicOperationComboBox.getSelectedItem()).compareTo("/") == 0 && stack.size() >= 2){
            if (doDivision() == 0){
            //outputTextField.setText("Sommato i numeri " + a + " " + b);
                stackTextArea.setText(stack.toString());
                inputTextField.setText("");
                inputTextField.requestFocusInWindow();
                inputButton.setText("Insert!");
            }
            else outputTextField.setText("Insufficient number of operands!");
        }
        else if(((String)basicOperationComboBox.getSelectedItem()).compareTo("sqrt") == 0 && stack.size() >= 1){
            //do square root
            //outputTextField.setText("Sommato i numeri " + a + " " + b);
            
            stackTextArea.setText(stack.toString());
            inputTextField.setText("");
            inputTextField.requestFocusInWindow();
            inputButton.setText("Insert!");
        }
        else if(((String)basicOperationComboBox.getSelectedItem()).compareTo("+-") == 0 && stack.size() >= 1){
            if (doInvertSign() == 0) {
                outputTextField.setText("Segno invertito eseguito");
                stackTextArea.setText(stack.toString());
                inputTextField.setText("");
                inputTextField.requestFocusInWindow();
                inputButton.setText("Insert!");
            }
            else outputTextField.setText("Insufficient number of operands!");
        }
        
        
    }//GEN-LAST:event_basicOperationComboBoxActionPerformed

    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
        // TODO add your handling code here:
        
        //"+", "-", "*", "/", "sqrt", "+-"

        if(inputTextField.getText().compareTo("") == 0){
            outputTextField.setText("Campo input vuoto!");
            inputTextField.requestFocusInWindow();
            inputButton.setText("Insert!");
        }
        else {
            
            if(inputTextField.getText().contains("j")){
            
                outputTextField.setText("");
            
                stack.push(new CartesianComplex(inputTextField.getText()));
                inputTextField.setText("");
                if(!stack.isEmpty())
                    stackTextArea.setText(stack.toString());
                inputTextField.requestFocusInWindow();
                inputButton.setText("Insert!");
            }
            else{
                outputTextField.setText("Insert a Number!");
                inputTextField.setText("");
                inputButton.setText("Insert!");
            }
        }
        
        
    }//GEN-LAST:event_inputButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> basicOperationComboBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel complexOperationLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton inputButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JTextArea stackTextArea;
    private javax.swing.JTabbedPane tabTabbedPane;
    // End of variables declaration//GEN-END:variables
}
