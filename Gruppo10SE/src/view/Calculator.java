/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import model.UserDefinedOperations;
import model.Variables;
import model.StackDataStructure;
import controller.state.basic.BasicOperationContext;
import controller.state.memory.MemoryOperationContext;
import controller.state.variable.VariableOperationContext;
import controller.CalculatorUtility;
import java.util.regex.*;
import java.awt.event.KeyEvent;
import javax.swing.*;
import com.formdev.flatlaf.*;
import java.awt.GridLayout;
import javax.swing.table.DefaultTableModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author giaco
 */
public class Calculator extends javax.swing.JFrame {

    private DefaultTableModel model;
    private String[] operazioni;
    private String[] operazioniStack;
    private String[] operazioniVariabili;

    private BasicOperationContext basicContext;
    private MemoryOperationContext memoryContext;
    private VariableOperationContext variableContext;

    // Pattern for the input Text Field
    private Pattern patternNumeroComplesso;
    private Pattern patternBasicOperation;
    private Pattern patternVariable;

    private CalculatorUtility controller;

    private StackDataStructure stack;
    private Variables variabili;
    private UserDefinedOperations op;

    private int next_down_press;

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();

        basicContext = new BasicOperationContext();
        memoryContext = new MemoryOperationContext();
        variableContext = new VariableOperationContext();

        // Pattern for the input Text Field
        patternNumeroComplesso = Pattern.compile("[+]?[-]?[0-9]*[.]?[0-9]*[+]?[-]?[0-9]*[.]?[0-9]*[j]?");
        patternBasicOperation = Pattern.compile("[+]?[-]?[*]?[/]?");
        patternVariable = Pattern.compile("[<>+-]{1}[a-z]");

        controller = new CalculatorUtility();

        stack = new StackDataStructure();
        variabili = new Variables();
        op = new UserDefinedOperations();

        next_down_press = 0;

        // JFrame 
        this.setResizable(false);
        this.setTitle("Calculator");
        this.setIconImage(new ImageIcon(getClass().getResource("calculator.png")).getImage());

        //this.getContentPane().setBackground( Color.getHSBColor((float)0.0,(float)0.0,(float)0.94));
        operationTable.setShowGrid(true);

        // Text field and area are not editable
        variablesTextField.setEditable(false);
        outputTextField.setEditable(false);
        stackTextArea.setEditable(false);

        // Show variables on the jlist
        controller.showVariables(variabili, variablesList);

        // Focus on the input text field
        inputTextField.requestFocusInWindow();

        // Text of the component
        inputTextField.setText("");
        outputTextField.setText("Insert a number like this 5+10j");
        inputButton.setText("Insert");

        // Combo box
        operazioni = new String[]{"Basic operation", "+", "-", "*", "/", "sqrt", "+-"};
        operazioniStack = new String[]{"Memory operation", "clear", "drop", "dup", "swap", "over"};
        operazioniVariabili = new String[]{"Variables operation", ">x", "<x", "+x", "-x"};

        basicOperationComboBox.setEditable(false);
        memoryComboBox.setEditable(false);
        variablesComboBox.setEditable(false);

        for (String operazione : operazioni) {
            basicOperationComboBox.addItem(operazione);
        }
        for (String operazioneMem : operazioniStack) {
            memoryComboBox.addItem(operazioneMem);
        }
        for (String operazioneVar : operazioniVariabili) {
            variablesComboBox.addItem(operazioneVar);
        }

        model = new DefaultTableModel();
        operationTable.setModel(model);
        model.addColumn("Operation");
        model.addColumn("Function");
        operationTable.setDefaultEditor(Object.class, null);
        operationTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        operationTable.getTableHeader().setReorderingAllowed(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        outputTextField = new javax.swing.JTextField();
        basicOperationComboBox = new javax.swing.JComboBox<>();
        inputButton = new javax.swing.JButton();
        tabTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        stackTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        variablesList = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        memoryComboBox = new javax.swing.JComboBox<>();
        inputTextField = new javax.swing.JTextField();
        variablesComboBox = new javax.swing.JComboBox<>();
        operationDefineButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        operationTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        variablesTextField = new javax.swing.JTextField();
        calculateButton = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputTextField.setBackground(new java.awt.Color(53, 55, 56));
        outputTextField.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        outputTextField.setForeground(new java.awt.Color(255, 153, 0));

        basicOperationComboBox.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        basicOperationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicOperationComboBoxActionPerformed(evt);
            }
        });

        inputButton.setBackground(new java.awt.Color(61, 122, 166));
        inputButton.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        inputButton.setText("Insert");
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        tabTabbedPane.setForeground(new java.awt.Color(255, 153, 0));
        tabTabbedPane.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N

        stackTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        stackTextArea.setColumns(20);
        stackTextArea.setRows(5);
        jScrollPane2.setViewportView(stackTextArea);

        tabTabbedPane.addTab("Memory", jScrollPane2);

        variablesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        variablesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                variablesListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(variablesList);

        tabTabbedPane.addTab("Variables", jScrollPane3);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("SHORTCUT\nDOWN  - next variable\nUP    - previous variable\nALT   - first variable\nCTRL  - last variable");
        jScrollPane5.setViewportView(jTextArea1);

        tabTabbedPane.addTab("?", jScrollPane5);

        memoryComboBox.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        memoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryComboBoxActionPerformed(evt);
            }
        });

        inputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputTextFieldKeyPressed(evt);
            }
        });

        variablesComboBox.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        variablesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variablesComboBoxActionPerformed(evt);
            }
        });

        operationDefineButton.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        operationDefineButton.setText("Define a new operation");
        operationDefineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationDefineButtonActionPerformed(evt);
            }
        });

        operationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Operations", "Functions"
            }
        ));
        operationTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        operationTable.setGridColor(new java.awt.Color(102, 102, 102));
        jScrollPane1.setViewportView(operationTable);

        jPanel1.setBackground(new java.awt.Color(61, 122, 166));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        variablesTextField.setBackground(new java.awt.Color(53, 55, 56));
        variablesTextField.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        variablesTextField.setForeground(new java.awt.Color(255, 153, 0));

        calculateButton.setBackground(new java.awt.Color(61, 122, 166));
        calculateButton.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(tabTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(calculateButton)
                                .addGap(38, 38, 38)
                                .addComponent(operationDefineButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(basicOperationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(memoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(variablesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(variablesTextField)
                        .addGap(18, 18, 18)
                        .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inputTextField)
                        .addGap(18, 18, 18)
                        .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(variablesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(basicOperationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(variablesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(operationDefineButton)
                            .addComponent(calculateButton))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tabTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBasicOperation(String operation) {
        basicContext.changeState(operation);
        inputTextField.requestFocusInWindow();
        if (basicContext.doBasicOperation(stack) == 0) {
            outputTextField.setText(basicContext.getMessage());
            stackTextArea.setText(stack.toString());
            inputTextField.setText("");
        } else if (basicContext.doBasicOperation(stack) == 1) {
            outputTextField.setText("Insufficient number of operands!");
        } else {
            outputTextField.setText("Math ERROR: you are dividing by 0");
        }
    }

    private void checkMemoryOperation(String memoryOperation) {
        memoryContext.changeState(memoryOperation);
        inputTextField.requestFocusInWindow();
        if (memoryContext.doMemoryOperation(stack) == 0) {
            outputTextField.setText(memoryContext.getMessage());
            stackTextArea.setText(stack.toString());
            inputTextField.setText("");
        } else if (memoryContext.doMemoryOperation(stack) == 1) {
            outputTextField.setText("The memory is empty!");
        } else {
            outputTextField.setText("Insufficient numbers in memory!");
        }
    }

    private void checkVariableOperation(String variableOperation, char variable) {
        variableContext.changeState(variableOperation);

        if (variableContext.doVariableOperation(stack, variabili, variable) == 0) {

            outputTextField.setText(variableContext.getMessage(variable));

            stackTextArea.setText(stack.toString());
            inputTextField.setText("");

            if (!"<x".equals(variableOperation)) {
                controller.showVariables(variabili, variablesList);

                variablesTextField.setText(controller.getVariable(variabili, variable));
                variablesList.setSelectedValue(controller.getVariable(variabili, variable), false);
            } else {
                variablesTextField.setText(variablesList.getSelectedValue());
                variablesList.setSelectedValue(variablesList.getSelectedValue(), false);
            }

            inputTextField.requestFocus();

        } else {
            outputTextField.setText("Empty memory!");
        }
    }

    private void readFromInputTextField() {
        if (inputTextField.getText().compareTo("") == 0) {

            outputTextField.setText("Insert a number like this 5+10j");
            inputTextField.requestFocusInWindow();
        } else {

            Matcher m = patternNumeroComplesso.matcher(inputTextField.getText());
            if (m.matches()) {

                controller.insertNumber(stack, inputTextField.getText());
                outputTextField.setText("Insert a number like this 5+10j");

                inputTextField.setText("");
                if (!controller.checkIfEmpty(stack)) {
                    stackTextArea.setText(stack.toString());
                }
                inputTextField.requestFocusInWindow();
            } else {
                outputTextField.setText("Insert a number like this 5+10j");
                inputTextField.setText("");
            }

        }
    }

    private void basicOperationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicOperationComboBoxActionPerformed
        String operation = (String) basicOperationComboBox.getSelectedItem();
        if (!"Basic operation".equals(operation)) {
            checkBasicOperation(operation);
        }
    }//GEN-LAST:event_basicOperationComboBoxActionPerformed

    private void memoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryComboBoxActionPerformed
        String operation = (String) memoryComboBox.getSelectedItem();
        if (!"Memory operation".equals(operation)) {
            checkMemoryOperation(operation);
        }
    }//GEN-LAST:event_memoryComboBoxActionPerformed

    private void inputTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            readFromInputTextField();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {

            variablesList.setSelectedIndex(next_down_press);

            next_down_press++;
        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {

            if (next_down_press != 0) {
                next_down_press--;
                variablesList.setSelectedIndex(next_down_press);
            }

        }
        if (evt.getKeyCode() == KeyEvent.VK_CONTROL) {

            variablesList.setSelectedIndex(variabili.size() - 1);
            next_down_press = variabili.size() - 1;
        }
        if (evt.getKeyCode() == KeyEvent.VK_ALT) {

            variablesList.setSelectedIndex(0);
            next_down_press = 0;
        }
    }//GEN-LAST:event_inputTextFieldKeyPressed

    private void variablesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_variablesListValueChanged
        if (evt.getValueIsAdjusting() == false) {

            if (variablesList.getSelectedIndex() == -1) {
                //No selection, disable combo box.
                variablesComboBox.setEnabled(false);
            } else {
                //Selection, enable combo box
                variablesComboBox.setEnabled(true);
                variablesTextField.setText(variablesList.getSelectedValue());
            }
        }
    }//GEN-LAST:event_variablesListValueChanged

    private void variablesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variablesComboBoxActionPerformed
        String operation = (String) variablesComboBox.getSelectedItem();
        if (!"Variables operation".equals(operation) && variablesList.getSelectedIndex() != -1) {
            char variable_char = variablesList.getSelectedValue().charAt(0);
            checkVariableOperation(operation, variable_char);
        }
    }//GEN-LAST:event_variablesComboBoxActionPerformed

    private void operationDefineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationDefineButtonActionPerformed
        JPanel p = new JPanel(new GridLayout(0, 1, 2, 2));
        JTextField opName = new JTextField(25);
        JTextField opFunc = new JTextField(25);

        p.add(new JLabel("Name: "));
        p.add(opName);
        p.add(new JLabel("Operation: "));
        p.add(opFunc);

        int choice = JOptionPane.showConfirmDialog(null, p, "New Operation",
                JOptionPane.OK_CANCEL_OPTION);

        if (choice == JOptionPane.OK_OPTION) {
            String name = opName.getText();
            String func = opFunc.getText();

            String[] split = func.split("\\s+");
            int lenSplit = split.length;
            int matching = 0;

            for (String s : split) {

                Matcher matchBasic = patternBasicOperation.matcher(s);
                Matcher matchVariable = patternVariable.matcher(s);
                Matcher matchNumber = patternNumeroComplesso.matcher(s);

                if (matchBasic.matches()) {
                    matching++;
                } else if (matchVariable.matches()) {
                    matching++;
                } else if (s.compareTo("clear") == 0) {
                    matching++;
                } else if (s.compareTo("drop") == 0) {
                    matching++;
                } else if (s.compareTo("dup") == 0) {
                    matching++;
                } else if (s.compareTo("swap") == 0) {
                    matching++;
                } else if (s.compareTo("over") == 0) {
                    matching++;
                } else if (s.compareTo("sqrt") == 0) {
                    matching++;
                } else if (matchNumber.matches()) {
                    matching++;
                }
            }

            if (matching == lenSplit) {

                if (name.length() != 0 && func.length() != 0) {
                    controller.updateTable(op, name, func);

                    model.getDataVector().removeAllElements();

                    for (String function : op.keySet()) {
                        model.addRow(new Object[]{
                            function,
                            op.getValue(function)
                        });
                    }
                }
            } else {

                JOptionPane.showMessageDialog(p, "INVALID OPERATION", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_operationDefineButtonActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        // TODO add your handling code here:
        if (!operationTable.getSelectionModel().isSelectionEmpty()) {
            int row = operationTable.getSelectedRow();
            int column = 1;
            String operation = (String) operationTable.getValueAt(row, column);

            String[] split = operation.split("\\s+");
            for (String s : split) {

                Matcher matchBasic = patternBasicOperation.matcher(s);
                Matcher matchVariable = patternVariable.matcher(s);
                Matcher matchNumber = patternNumeroComplesso.matcher(s);

                if (matchBasic.matches()) {
                    checkBasicOperation(s);
                } else if (matchVariable.matches()) {
                    char variable = s.charAt(1);
                    StringBuilder string = new StringBuilder(s);
                    string.setCharAt(1, 'x');
                    outputTextField.setText(string.toString());
                    checkVariableOperation(string.toString(), variable);
                } else if (s.compareTo("clear") == 0) {
                    checkMemoryOperation(s);
                } else if (s.compareTo("drop") == 0) {
                    checkMemoryOperation(s);
                } else if (s.compareTo("dup") == 0) {
                    checkMemoryOperation(s);
                } else if (s.compareTo("swap") == 0) {
                    checkMemoryOperation(s);
                } else if (s.compareTo("over") == 0) {
                    checkMemoryOperation(s);
                } else if (s.compareTo("sqrt") == 0) {
                    checkBasicOperation(s);
                } else if (matchNumber.matches()) {
                    controller.insertNumber(stack, s);
                }

            }
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed

        readFromInputTextField();
    }//GEN-LAST:event_inputButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
        Flat Light (class com.formdev.flatlaf.FlatLightLaf)
        Flat Dark (class com.formdev.flatlaf.FlatDarkLaf)
        Flat IntelliJ (class com.formdev.flatlaf.FlatIntelliJLaf)
        Flat Darcula(class com.formdev.flatlaf.FlatDarculaLaf)
         */
        try {
            UIManager.setLookAndFeel(new FlatDarculaLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> basicOperationComboBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton inputButton;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> memoryComboBox;
    private javax.swing.JButton operationDefineButton;
    private javax.swing.JTable operationTable;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JTextArea stackTextArea;
    private javax.swing.JTabbedPane tabTabbedPane;
    private javax.swing.JComboBox<String> variablesComboBox;
    private javax.swing.JList<String> variablesList;
    private javax.swing.JTextField variablesTextField;
    // End of variables declaration//GEN-END:variables
}
